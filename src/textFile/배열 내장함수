https://learnjs.vlpt.us/basics/09-array-functions.html

# map 함수 
map은 배열 안의 각 원소를 변환할 때 사용되며, 이 과정에서 '새로운 배열'을 만든다.
const array = [1, 2, 3, 4, 5, 6, 7, 8];

⏬map 사용 안하고, forEach 사용 시
const squared = [];
array.forEach(n => { //📌forEach : 무언가를 반복할 뿐, 결과를 반환하지 않음
  squared.push(n * n);
});

⏬map사용, 간결
const square = n => n * n;
const squared = array.map(square); //📌map 기존 배열을 기반으로 새로운 배열을 만들어 반환

✅리액트에서는 동적인 배열을 렌더링해야할 때는 이 함수를 사용하여 일반 데이터 배열을 리액트 엘리멘트로 이루어진 배열로 변환해주면된다.(https://react.vlpt.us/basic/11-render-array.html)
예시)
 return (
    <div>
      {users.map(user => (
        <User user={user} />
      ))}
    </div>
  );


# filter 함수
filter 함수는 배열에서 특정 조건을 만족하는 값들만 따로 추출하여 새로운 배열을 만든다.

const todos = [
    {
        id: 1,
        text: '자바스크립트 입문',
        done: true
    }
];
const tasksNotDone = todos.filter(todo => todo.done === false); // 조건 : todo.done === false

✅리액트에서는 삭제버튼 기능에 사용한다.(https://react.vlpt.us/basic/14-array-remove.html)
예시)
const onRemove = id => {
    // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 '새로운 배열'을 만듬
    // = user.id 가 id 인 것을 제거함
    setUsers(users.filter(user => user.id !== id));
  };

# concat 함수
- 내장함수
- 새로운 원소가 추가된 새로운 배열을 만들어준다.
예시)
setUsers([...users, user]);
⏬(둘다 결과는 같다.)
setUsers(users.concat(user));