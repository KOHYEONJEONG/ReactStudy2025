# useEffect 란
리액트 컴포넌트의 사이드 이펙트를 제어하는 새로운 React hook
- 동기함수이다.

참고 : 사이드이펙트.txt

# 기본적인 원리
무조건 렌더링이나 리렌더링이 된 상태에서야
deps 배열값이 바뀌었는지 검사한다.
(컴포넌트 호출과 렌더링(화면 그려짐)과는 다르다)
=============================================================================================
🚨 주의1
useRef 값은 들어와도 동작하지 않는다.
왜? 객체 자체이기 때문에 바뀌는게 아니다.
제일 중요한건건 렌더링/리렌더링이 유발되지 않아 useEffect의 실행조건에 부합하지 않는다.
ex ) deps배열에 [ref]

그렇다면 일반변수도?
const inputRef = useRef();
deps배열에 inputRef.current 도 마찬가지로 실행안됨.
ex )  [inputRef.current]


# 하지만 이거는 알아야한다. 리렌더링이 되면은  deps 배열에 ref가 있어도 실행된다는걸!
const [input, setInput] = useState("");//setInput 상태함수가 실행되면 화면은 리렌더링된다.
const count = useRef(0);

const onChnage = (e) => {
    setInput(e.target.value);//이때 리렌더링되지?
    count.current ++ ;
}

useEffect (()=>{}, [count]);//그러면 실행하는거야!
=============================================================================================
🚨 주의2

useEffect(async () => { //async 키워드를 붙이면 무조건 Promise를 반환하게 돼
  // 내부에서 await 사용 가능
  // 하지만 이 함수 자체는 Promise를 반환함 ❌
}, []);
📌useEffect의 리턴값을 "클린업 함수"라고 생각하는데, 여기서 Promise가 오면 헷갈리게 되는 거지

⏬해결
📌비동기 작업을 하려면 useEffect 안에서 별도로 async 함수 만들어서 실행해야 돼.
useEffect(() => {
  const fetchDataAsync = async () => {
    const result = await fetchData();
    setData(result);
  };

  fetchDataAsync(); // 이건 그냥 Promise지만, useEffect는 이걸 기다리지 않음
}, []);
=============================================================================================
🚨 주의3
