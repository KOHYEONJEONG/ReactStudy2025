https://react.vlpt.us/basic/07-useState.html

# 함수형 업데이트
지금은 Setter 함수를 사용 할 때, 
업데이트 하고 싶은 새로운 값을 파라미터로 넣어주고 있는데요, 
그 대신에 기존 값을 어떻게 업데이트 할 지에 대한 함수를 등록하는 방식으로도 값을 업데이트 할 수 있습니다.


setInputs(inputs => ({
	...inputs,
	[name]: value
   })
);

함수형 업데이트는 주로 나중에 컴포넌트를 최적화를 하게 될 때 사용하게 됩니다.
 지금 당장은 함수형 업데이트란게 있는 것 정도만 이해해두시면 충분합니다. 
이게 왜 최적화랑 관련이 되어있는지는 나중에 알아보도록 할게요.

함수형 업데이트를 하게 되면, setUsers 에 등록하는 콜백함수의 파라미터에서 최신 users 를 참조 할 수 있기 때문에 deps 에 users 를 넣지 않아도 된답니다.

 const onChange = useCallback(e => {
    const { name, value } = e.target;
    setInputs(inputs => ({
      ...inputs,
      [name]: value
    }));
  }, []);

const onCreate = useCallback(() => {
    const user = {
      id: nextId.current,
      username,
      email
    };
    setUsers(users => users.concat(user));

    setInputs({
      username: '',
      email: ''
    });
    nextId.current += 1;
  }, [username, email]);

------------------

# 기본 문법
setNumber((상태)=> 상태 업데이트 로직);

#사용
setNumber((number)=> number+1);//1
setNumber((number)=> number+1);//바로이어서 이전 상태의 값을 의존하여 새로운 상태를 계산할 수 있다. ( 1+1 )

https://bongra.tistory.com/492

#왜 쓸까?
React는 비동기적으로 동작하기 때문에

------------------------------------------------------------------------
링크 : https://react.vlpt.us/basic/19-React.memo.html
function countActiveUsers(users) {
  console.log('활성 사용자 수를 세는중...');
  return users.filter(user => user.active).length;
}

function App() {
  const [inputs, setInputs] = useState({
    username: '',
    email: ''
  });
  const { username, email } = inputs;

  const onChange = useCallback( e => {
      const { name, value } = e.target;

    ;   setInputs({
    ;     ...inputs,
    ;     [name]: value
    ;   });

		setInputs(inputs => ({
			...inputs,
			[name]: value
		}));

    },[inputs]);

  const [users, setUsers] = useState([
    {
      id: 1,
      username: 'velopert',
      email: 'public.velopert@gmail.com',
      active: true
    },
    {
      id: 2,
      username: 'tester',
      email: 'tester@example.com',
      active: false
    },
    {
      id: 3,
      username: 'liz',
      email: 'liz@example.com',
      active: false
    }
  ]);

  const nextId = useRef(4);
  const onCreate = useCallback(() => {
    const user = {
      id: nextId.current,
      username,
      email
    };
    setUsers(users.concat(user));

    setInputs({
      username: '',
      email: ''
    });
    nextId.current += 1;
;   }, [users, username, email]);
  }, [username, email]);

  const onRemove = useCallback(
    id => {
      // user.id 가 파라미터로 일치하지 않는 원소만 추출해서 새로운 배열을 만듬
      // = user.id 가 id 인 것을 제거함
      setUsers(users.filter(user => user.id !== id));
    ; }, [users] );
    }, [] );

  const onToggle = useCallback(
    id => {
      setUsers(
        users.map(user =>
          user.id === id ? { ...user, active: !user.active } : user
        )
      );
    ; },[users]);
    },[]);

  const count = useMemo(() => countActiveUsers(users), [users]);

  return (
    <>
      <CreateUser
        username={username}
        email={email}
        onChange={onChange}
        onCreate={onCreate}
      />
      <UserList users={users} onRemove={onRemove} onToggle={onToggle} />
      <div>활성사용자 수 : {count}</div>
    </>
  );
}

export default App;