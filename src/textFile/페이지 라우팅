[Page Routing - 페이지 라우팅]
경로에 따라 알맞은 페이지를 렌더링 하는 과정
EX) /new ->new 페이지 렌더링

[페이지 라우팅의 원리]
브라우저(Client) -> /blog 요청 -> 서버(Server) : 모든 웹페이지들을 HTML로써 미리 가지고 있음
서버로 받은 페이지를 그대로 화면에 렌더링  <-   blog.html 반환 <- 서버의 응답

그걸 MPA(Multi Page Application)라 부른다.
- 애초에 서버가 여러개의 페이지를 가지고 있다.
- 동작방식이 직관적이다.
- 많은 서비스가 사용하는 전통적인 방식

MPA 구성 방법론(아키텍쳐)
- Multi Page Application
- ⭐서버가 사용자에게 제공하는 페이지를 여러개 가지고 있음.
- ⭐많은 서비스가 사용하는 전통적인 방식

-> 서버측에서 페이지를 미리 렌더링해준다 해서 SSR

EX) SSR (Server Side Redering) 렌더링 기법
> SSR과 MPA는 같은 말이 아님.

MPA는 서버가 다수의 웹 페이지를 보유하고 있으며
SSR은 브라우저가 요청을 보내게되면 SSR 방법으로 미리 완성된 페이지를 응답해줌.

- header.html
- content.html
...

(MPA 단점)
애초에 서버가 여러개의 페이지를 지님
- 페이지 이동이 매끄럽지 않고 비 효율적
- 다수의 사용자 접속 시 서버의 부하가 심해짐.

- 💥페이지 이동이 쾌적하지 못함
> 새로운 페이지를 받아와서 화면을 처음부터 다시 렌더링해준다.
> HEADER는 가만히 있는것 처럼 보이지만(CONTENT만 불러온다고 하더라도)
원본을 전부 다 제거하고 새로운 HTML 파일로 페이지를 처음부터 다시 그림.
>> 브라우저가 ex)index.html을 보이는 와중에 페이지를 이동할때마다 원래 렌더링 해뒀던 페이지를 다시 지우고 ex)setting.html을 보여준다.
(🚨페이지가 새로고침되는거 처럼 깜박이게 된다.)
다수의 사용에 요청이 많아지면 서버가 겪는 부하가 심해진다.
ㄴ ( 수강신청 )


/////////////

[React가 추구하는 페이지 이동]
MAP 방식을 따르지 않음.

-> React는 SPA 방식을 채택.

SPA(Single Page Application) 구성 방법론(아키텍쳐)
- 페이지 이동이 매끄럽고 효율적
- 다수의 사용자가 접속해도 크게 상관X
- ⭐index.html 페이지 한개만 지님. (리액트 App에 빈껍데기 역할)
ㄴ 브라우저는 index.html 밖에 받는게 없고 실행하면 그래서 처음에 빈 흰색 화면이 렌더링됨.

[번들링]
번들링 : 자바스크립트 파일(리액트 컴포넌트 및 기능들이 작성된 js 파일) 하나의 파일로 묶는 행위가 번들링이라 부른다.
번들파일 : 번들링되어서 브라우저에게 전달되는 이 자바스크립 파일을 번들파일이라 부른다.
이 번들링 과정은 bitet가 해줌(하나의 자바스크립트 파일로 묶여서 = 즉 번들링 되어서 브라우저에게 추가로 전달)

bite에 의해 하나의 자바스크립트 파일로 번들링되고
즉 묶여서 이렇게 브라우저에게  추가로 전달이된다.

createRoot(document.getElementById("root")).render(<App />);

CSR 렌더링 기법
브라우저에서 실행되는 React App
- 번들링된 React App을 실행함.

브라우저가 스스로 페이지를 이동한다.

/////////////설정/////////////////
npm i react-router-dom
ㄴ pagkage.json 파일에 "react-router-dom": "^7.3.0" 가 설정된다.